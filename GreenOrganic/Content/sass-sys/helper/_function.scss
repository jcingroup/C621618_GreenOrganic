@charset "UTF-8";

// px換算至em
@function em($px, $context: $font-size-root) {
    @if (unitless($px)) {
        $px: $px * 1px;
    }

    @if (unitless($context)) {
        $context: $context * 1px;
    }

    @return $px / $context * 1em;
}

// 算寬度百分比
@function cp($target, $container: $max-width) {
    @return ceil(($target / $container) * 100%);
}

// 取第n個之後的pages值
@function page($item) {
    $page: ();
    @for $i from $item through length($pages) {
        $page: append($page, nth($pages, $i));
    }
    @return $page;
}


// mixins
// -----------------------------------------------------------------

// 字換圖
@mixin text-pic($img, $width, $height, $display: block, $pic: false, $position: 0 0) {
    @include text-hide;
    @if $pic == fixed {
        background-attachment: fixed;
    }
    background: url(#{$img-path}/#{$img}) $position no-repeat;
    display: $display;
    width: $width; height: $height;
    
    overflow: hidden;
}

@mixin make-content($content: " ", $display: block, $position: absolute) {
    content:$content;
    display: $display;
    position: $position;
}


// var Maps
// -----------------------------------------------------------------

// // colors
// @function color($key) {
//     @return map-get($color, $key);
// }

// // z-index
// @function z($key) {
//     @return map-get($z-index, $key);
// }

// 取多層值
// 範例 background: m-get($color-theme, 'default', 'background');
@function m-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

// 進階合併 map function
// About map-merge(): sass內建的合併map功能，但只能2組
// @param {Map} $map - first map
// @param {ArgList} $maps - other maps
// @param {Bool} $deep - recursive mode
// @return {Map}
@function map-extend($map, $maps.../*, $deep */) {
    $last: nth($maps, -1);
    $deep: $last == true;
    $max: if($deep, length($maps) - 1, length($maps));

    // Loop through all maps in $maps...
    @for $i from 1 through $max {
        // Store current map
        $current: nth($maps, $i);

        // If not in deep mode, simply merge current map with map
        @if not $deep {
            $map: map-merge($map, $current);
        } @else {
            // If in deep mode, loop through all tuples in current map
            @each $key, $value in $current {

                // If value is a nested map and same key from map is a nested map as well
                @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
                    // Recursive extend
                    $value: map-extend(map-get($map, $key), $value, true);
                }

                // Merge current tuple with map
                $map: map-merge($map, ($key: $value));
            }
        }
    }

    @return $map;
}